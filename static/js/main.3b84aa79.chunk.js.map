{"version":3,"sources":["Item/Item.styles.ts","Item/Item.tsx","CartItem/CartItem.styles.ts","CartItem/CartItem.tsx","Cart/Cart.styles.ts","Cart/Cart.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["Wrapper","styled","div","Item","item","handleAddToCart","src","image","alt","title","description","price","Button","onClick","CartItem","addToCart","removeFromCart","className","amount","toFixed","size","disableElevation","variant","id","aside","Cart","cartItems","length","map","StyledButton","IconButton","getProducts","a","fetch","json","App","items","useState","cartOpen","setCartOpen","setCartItems","useQuery","data","isLoading","error","clickedItem","prevState","find","LinearProgress","Drawer","anchor","open","onClose","reduce","acumulator","Badge","badgeContent","color","Grid","container","spacing","xs","sm","client","QueryClient","ReactDOM","render","QueryClientProvider","document","getElementById"],"mappings":"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","file":"static/js/main.3b84aa79.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: column;\n  width: 100%;\n  border: 1px solid lightblue;\n  border-radius: 20px;\n  height: 100%;\n  button {\n    border-radius: 0 0 20px 20px;\n  }\n  img {\n    max-height: 250px;\n    object-fit: cover;\n    border-radius: 20px 20px 0 0;\n  }\n  div {\n    font-family: Arial, Helvetica, sans-serif;\n    padding: 1rem;\n    height: 100%;\n  }\n`;\n","import Button from \"@material-ui/core/Button\";\n// Types\nimport { CartItemType } from \"../App\";\n// Styles\nimport { Wrapper } from \"./Item.styles\";\n\ntype Props = {\n  item: CartItemType;\n  handleAddToCart: (clickedItem: CartItemType) => void;\n};\n//FC its the react functional component,\nconst Item: React.FC<Props> = ({ item, handleAddToCart }) => (\n  <Wrapper>\n    <img src={item.image} alt={item.title} />\n    <div>\n      <h3>{item.title}</h3>\n      <p>{item.description}</p>\n      <h3>${item.price}</h3>\n    </div>\n    <Button onClick={() => handleAddToCart(item)}>Add to cart</Button>\n  </Wrapper>\n); //A Functional component is a function that takes props and returns JSX. They do not have state or lifecycle methods. Functional components are easier to read, debug, and test.\n\nexport default Item;\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  font-family: Arial, Helvetica, sans-serif;\n  border-bottom: 1px solid lightblue;\n  padding-bottom: 20px;\n  div {\n    flex: 1;\n  }\n  .information,\n  .buttons {\n    display: flex;\n    justify-content: space-between;\n  }\n  img {\n    max-width: 80px;\n    object-fit: cover;\n    margin-left: 40px;\n  }\n`;\n","import Button from \"@material-ui/core/Button\";\n// Types\nimport { CartItemType } from \"../App\";\n// Styles\nimport { Wrapper } from \"./CartItem.styles\";\n\n//tipos\ntype Props = {\n  item: CartItemType;\n  addToCart: (clickedItem: CartItemType) => void;\n  removeFromCart: (id: number) => void;\n};\n\n//When creating a functional component in TypeScript we first need to use the type React.FC , which is based on the FunctionComponent interface: React. FC makes sure the signature of our function is correct and the return value is valid JSX\nconst CartItem: React.FC<Props> = ({ item, addToCart, removeFromCart }) => (\n  <Wrapper>\n    <div>\n      <h3>{item.title}</h3>\n      <div className=\"information\">\n        <p>price: ${item.price}</p>\n        <p>Total: ${(item.amount * item.price).toFixed(2)}</p>\n      </div>\n      <div className=\"buttons\">\n        <Button\n          size=\"small\"\n          disableElevation //to not have drop shadow\n          variant=\"contained\" //display with a background in the buttom\n          onClick={() => removeFromCart(item.id)}\n        >\n          -\n        </Button>\n        <p>{item.amount}</p>\n        <Button\n          size=\"small\"\n          disableElevation //to not have drop shadow\n          variant=\"contained\" //display with a background in the buttom\n          onClick={() => addToCart(item)}\n        >\n          +\n        </Button>\n      </div>\n    </div>\n    <img src={item.image} alt={item.title} />\n  </Wrapper>\n);\n\nexport default CartItem;\n","import styled from \"styled-components\"; //this is a npm package: https://styled-components.com/\n\nexport const Wrapper = styled.aside`\n  font-family: Arial, Helvetica, sans-serif;\n  width: 500px;\n  padding: 20px;\n`;\n","import CartItem from \"../CartItem/CartItem\";\n\nimport { Wrapper } from \"./Cart.styles\";\n\nimport { CartItemType } from \"../App\";\n\ntype Props = {\n  cartItems: CartItemType[];\n  addToCart: (clickedItem: CartItemType) => void;\n  removeFromCart: (id: number) => void;\n};\n\nconst Cart: React.FC<Props> = ({ cartItems, addToCart, removeFromCart }) => {\n  const calculateTotal = (items: CartItemType[]) =>\n    items.reduce((acc: number, item) => acc + item.amount * item.price, 0);\n  return (\n    <Wrapper>\n      <h2>Shoping Cart</h2>\n      {cartItems.length === 0 ? <p>no items</p> : null}\n      {cartItems.map((item) => (\n        <CartItem\n          key={item.id}\n          item={item}\n          addToCart={addToCart}\n          removeFromCart={removeFromCart}\n        />\n      ))}\n    </Wrapper>\n  );\n};\n\nexport default Cart;\n","import styled from \"styled-components\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\nexport const Wrapper = styled.div`\n  margin: 40px;\n`;\n//IconButton comes from materual UI\nexport const StyledButton = styled(IconButton)`\n  position: fixed;\n  z-index: 100;\n  right: 20px;\n  top: 20px;\n`;\n","import { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Grid from \"@material-ui/core/Grid\";\nimport AddShoppingCartIcon from \"@material-ui/icons/AddShoppingCart\";\nimport Badge from \"@material-ui/core/Badge\";\n//comps\nimport Item from \"./Item/Item\";\nimport Cart from \"./Cart/Cart\";\n\n//estilos\nimport { Wrapper, StyledButton } from \"./App.styles\";\nimport { functionalUpdate } from \"react-query/types/core/utils\";\n//tipos\nexport type CartItemType = {\n  id: number;\n  category: string;\n  description: string;\n  image: string;\n  price: number;\n  title: string;\n  amount: number;\n};\n\nconst getProducts = async (): Promise<CartItemType[]> => //data returned from fetch item its an array\n  //1 await for himself and another to convert to JSON\n  await (await fetch(\"https://fakestoreapi.com/products\")).json();\n\nconst App = () => {\n  const [cartOpen, setCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([] as CartItemType[]); //the type of the cartItem its defined here\n\n  const { data, isLoading, error } = useQuery<CartItemType[]>(\n    \"products\",\n    getProducts\n  );\n  const getTotalItems = (items: CartItemType[]) =>\n    items.reduce((acumulator: number, item) => acumulator + item.amount, 0); //54:11\n\n  const handleAddToCart = (clickedItem: CartItemType) => {\n    setCartItems((prevState) => {\n      //the item its already in the cart\n      const isItemInCart = prevState.find((item) => item.id === clickedItem.id);\n      if (isItemInCart) {\n        return prevState.map((item) =>\n          item.id === clickedItem.id\n            ? { ...item, amount: item.amount + 1 }\n            : item\n        );\n      }\n      return [...prevState, { ...clickedItem, amount: 1 }];\n    });\n  };\n  const handleRemoveFromCart = (id: number) => {\n    setCartItems((prevState) =>\n      prevState.reduce((acumulator, item) => {\n        if (item.id === id) {\n          if (item.amount === 1) return acumulator;\n          return [...acumulator, { ...item, amount: item.amount - 1 }];\n        } else {\n          return [...acumulator, item];\n        }\n      }, [] as CartItemType[])\n    );\n  };\n\n  if (isLoading) return <LinearProgress />; //os indicadores de progreso informan a los usuarios acerca del estado de procesos activos, tales como cargar una aplicación, enviar un formulario o guardar actualizaciones.\n  if (error) return <div>Something went wrong ...</div>;\n  return (\n    <Wrapper>\n      <Drawer anchor=\"right\" open={cartOpen} onClose={() => setCartOpen(false)}>\n        <Cart\n          cartItems={cartItems}\n          addToCart={handleAddToCart}\n          removeFromCart={handleRemoveFromCart}\n        />\n      </Drawer>\n      <StyledButton onClick={() => setCartOpen(true)}>\n        <Badge badgeContent={getTotalItems(cartItems)} color=\"error\"></Badge>\n        <AddShoppingCartIcon />\n      </StyledButton>\n      <Grid container spacing={3}>\n        {data?.map((item) => (\n          <Grid item key={item.id} xs={12} sm={4}>\n            <Item item={item} handleAddToCart={handleAddToCart} />\n          </Grid>\n        ))}\n      </Grid>\n    </Wrapper>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport {QueryClient, QueryClientProvider } from 'react-query';\n\nconst client = new QueryClient()\n\nReactDOM.render(\n  <QueryClientProvider client={client} >\n    <App />\n  </QueryClientProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}